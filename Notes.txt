ASP.NET Core MVC => Web App
EF Core => SQL Database
Azure => Azure Devops, Azure App Service => Azure Functions, Azure SQL
ASP.NET Core API with Angular => SPA


ASP.NET Core => Web APPS, API
	MVC => Web Applications
	API => Resut API

HTTP =>

GET  =>  retrive data    =>		http://movieshop.com/topmovies
POST => send info to server =>  http://movieshop.com/account/register => FirstName, LastName, Email, Password <form action ="POST"> submit
	Browsers => (http request)
	1. to make http request: any programming language => HttpClient
	2. Postman => http request
	3. JS => XMLHttpRequest, fetch API
PUT
DELETE


.NET Core => cross platform: win, Mac, Linux, Open source, Github, Ready to Cloud - 2016
.Net Framework => older Windows only 2002 => 1 ... 4.8

	console apps
	web applications
	web api
	mobile apps
	cross platform desktop apps
	IOT
	Games

ASP.NET Core => 2016 1.0
ASP.NET Core 6 => 2021 Nov

difference between Solution and project name:
solution is a container for one or more projects in Visual Studio


MVC => 
	Model => C# Object that represents some data
	View => UI => HTML CSS JS
	Controller => C# class tha inherits from Controller base class


Get => http://movieshop.com/Home/topmovies
	Domain name => http://movieshop.com
	HomeController => Home
	Action Method => topmovies

GET => http://movieshop.com/Home/topGrossingMovies
GET => http://movieshop.com/account/register
GET => http://movieshop.com/Home/Details/2


	routing =>  responsible for checking incoming request, mapping to the controller and action

	public class HomeController : Controller
	{
		//many action methods, return Type ActionResult or IActionResult
		//IActionResult is a Interface, ActionResult implement it
		//ActionResult is when you know return exactly type (view, json...)
		//IActionResult can return multiple different types

		[HttpGet]
		public ActionResult TopMovies()
		{
			//logic, go to database and get some objects
			//List<Movie> => (model)
			var movies= MovieServices().GetTopMoviews();

			return View(moviews);
		}

				[HttpGet]
		public ActionResult topGrossingMovies()
		{
			//logic, go to database and get some objects
			//List<Movie> => (model)
			var movies= MovieServices().GetTopMoviews();

			return View(moviews);
		}
	}

View in MVC are called Razor View => cshtml => combine c# and HTML


1. UI Code -- Views, Controllers Code
2. Business Logic Code => Hashing the Passwords, Getting Top Moviews, Registring, Login
3. Data Acess => Go to SQL Database, get data, add data, update
4. Services => Send Email => Log any exceptions
5. Caching => cache some data

Models/ViewModels/DTO (Data Transfer Objects)=> Data for Views (objects)
	MovieCardModel => Id, PosterUrl,title
	MovieDetailsModel 

Entities => C# objects that represents your Tables
		 =>movie
		 Id, Title, Budgt, PosterUrl, Revenue, Rating, ReleaseDate, Casts,


Exceptions: //find some movie ID that not exsit
class MovieNotFoundException : Exception
{
	
}

repositories:
1.ADO.NET
2.ORM (object relational mapping)=> Dapper or EF Core

Tag Helpers in views: 
<a asp-controller="Movies" asp-action="Details" asp-route-id ="@movie.Id">

Day 2
========================================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================================================
Dependency Injection =====interface as datatype, real object depend on outer injection===> examples!!!
------------------------------------------------------------
public interface IEngine
{
    void Start();
}

public class Engine : IEngine
{
    public void Start()
    {
        // traditional engine 
        Console.WriteLine("Starting traditional engine...");
    }
}

public class ElectricEngine : IEngine
{
    public void Start()
    {
        // electric engine
        Console.WriteLine("Starting electric engine...");
    }
}
---------------------------------------------------------
public class Car
{
    private readonly IEngine _engine;

    // dependency injection
    public Car(IEngine engine)
    {
        _engine = engine;
    }

    public void Drive()
    {
        _engine.Start();
    }
}
---------------------------------------------------------
implementation:
// traditional engine
IEngine traditionalEngine = new Engine();
Car carWithTraditionalEngine = new Car(traditionalEngine);
carWithTraditionalEngine.Drive(); // output：Starting traditional engine...

// electric engine
IEngine electricEngine = new ElectricEngine();
Car carWithElectricEngine = new Car(electricEngine);
carWithElectricEngine.Drive(); // output：Starting electric engine...
-------------------------------------------------------

HomeController cot = new HomeController(MovieService class instance);
1.Constructor Injection 99%  
2. Property Injection
3.Method Injection

.NET Core has buit-in DI support
//Autofac: different controller ask for different interface functions implementation
.NET Framwork needs to rely on 3rd party libararies such as Ninject, Autofac for DI

steps for DI:
1. create an abstraction, interface IMovieService
2. Implement the interface IMovieService
3. create readonly filed for the abstraction (interface)
4. Inject the type in the constructor with DI from program.cs with required scope

builder.Services.AddScoped<IMovieService, MovieService>();
transient:create each time while request service
scoped: create per request
singleton: create when first request and use for the whole application

------------------------------------------------------------------------
ADO.NET => IDbConnection, SQLCommand
Dapper => ORM light weight ORM => Stackoverflow
Entity Framwork => Microsoft => Full ORM
	Create the databse completely without writing single line of SQL
	LINQ to access the databse and execute and get the data => C# 


Movies => table
id, title, revenue, budget

select top 30 * from Moviews order by revenue

Movies class =>

movies.OrderByDescind(m=> m.Revenue).Take(30) ===> LINQ => converted to SQL code by EF

EF (entity framwork) can use it in 2 ways:
1. code first approach **** write C# code and you use something called migrations to create the tables
2. database first approach => is not fully supported in .NET Core

Code first apprach creating the database:
1. Entities => Table
2. Genre => Genre Table 
3. ConnectionString => server name, database name, any credentials
4. install the Entity Framwork Library
5. In EF 2 most important classes DBcontent => represent your database
and Dbset=> represents your table
6. Create new custom DbContext class that derive from base DbContext class from EF
7. Inject SQL server connection string into the DbContext options
8. Now we use migrations concept in EF to create or update the database
9. Create DbSet property inside the DbContext for the entity you need 
10.Conventions , if you have Id as a property, it will make it as PK, primary key
11.Create a migration file with Add-Migration command
12.Check your migration file and make sure everything is good and then run Update-database 
command to execute migration file
13.If you want to mode your database and tables, then you have 2 options:
	1.Data Annotations
	2.Fluent API

-------------------------------------------------------------------------
builder.Property(m => m.Price).HasColumnType("decimal(5, 2)").HasDefaultValue(9.9m);
decimal(5, 2): means a decimal number can have 5 digits as decimal number and 2 digits as fractional
																		12.56    T
																		123.48   T
																		12356.4  F
																		123.458	 F
9.9m: means if the value is null, make it 9.9. "m" is datatype for decimal
-------------------------------------------------------------------------
Day 3
========================================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================================================
14. Always check the migration file and see if it has right data model, don't update the database
without checking 
15. If your migration is not good and if you havn't update-database, then its safe to remove that
migration using remove command
16. If you have update-database and you want to change something then its better to change the model and
add new migration and update the database


Partial View in MVC will help us reusability, they are nothing but views inside another view


Day 4
========================================================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================================================
async/await

Sync vs Async

ASP.NET => when a request come in
Get => http://movieshop.com/movies/details/22

ASP.NET will have Threadpool => collection of thread => 10 threads
T1 T2 ... T10
20 requests at the same time for the same URL or different URL
t1 to t10 to process each request
11 the request => 503 error (service unavailable)
prevent thread starvation sceanrio

I/O =>
	async/await => go together, only await a method that returns a Task

async modifier to the method
always return a Task

sync			async
int				Task<int>
ActionResult	Task<ActionResult>
void			Task

Server side Pagination
you wanna get Movies by genre

disadvantages of display all dataset:
UI => not good UI EXP
Takes lots of time => SQL server needs to get all the data

Get => http://movieshop.com/movies/genre/1 => get all the moviews for genre 1

Movie, MovieGenre

Select  m.id, m.posterUrl, m.title
From
Movies m join MovieGenres mg on m.id = mg.movieid
where mg.genreID = 1
order by m.id 
OFFSET 0 ROWS FETCH NEXT 30 ROWS ONLY
//skip(60) Take(30)

1473/30 =>49.1 ==> 50 pages
start point: ((pagenumber - 1) * Pagesize)
---page 1: 0-30
---page 2: ((pagenumber - 1) * Pagesize) (2-1)*30 = 30 
---page 3: ((pagenumber - 1) * Pagesize) (3-1)*30 = 60 


Get => http://movieshop.com/movies/genre/1?pageSize=30&pageNumber=2

<nav aria-label="Page navigation example">
  <ul class="pagination">
  foreach(var movie in )
    <li class="page-item"><a class="page-link" href="#">Previous</a></li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item"><a class="page-link" href="#">2</a></li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item"><a class="page-link" href="#">Next</a></li>
  </ul>
</nav>



